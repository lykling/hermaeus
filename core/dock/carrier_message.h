// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file carrier_message.h
 * This header file contains the declaration of the described types in the IDL
 * file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _HERMAEUS_CORE_DOCK_CARRIER_MESSAGE_H_
#define _HERMAEUS_CORE_DOCK_CARRIER_MESSAGE_H_

#include <stdint.h>

#include <array>
#include <bitset>
#include <map>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(carrier_message_SOURCE)
#define carrier_message_DllAPI __declspec(dllexport)
#else
#define carrier_message_DllAPI __declspec(dllimport)
#endif  // carrier_message_SOURCE
#else
#define carrier_message_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define carrier_message_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
}  // namespace fastcdr
}  // namespace eprosima

namespace hermaeus {
namespace core {

/*!
 * @brief This class represents the structure CarrierMessage defined by the user
 * in the IDL file.
 * @ingroup CARRIER_MESSAGE
 */
class CarrierMessage {
 public:
  /*!
   * @brief Default constructor.
   */
  eProsima_user_DllExport CarrierMessage();

  /*!
   * @brief Default destructor.
   */
  eProsima_user_DllExport ~CarrierMessage();

  /*!
   * @brief Copy constructor.
   * @param x Reference to the object CarrierMessage that will be copied.
   */
  eProsima_user_DllExport CarrierMessage(const CarrierMessage& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object CarrierMessage that will be copied.
   */
  eProsima_user_DllExport CarrierMessage(CarrierMessage&& x);

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object CarrierMessage that will be copied.
   */
  eProsima_user_DllExport CarrierMessage& operator=(const CarrierMessage& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object CarrierMessage that will be copied.
   */
  eProsima_user_DllExport CarrierMessage& operator=(CarrierMessage&& x);

  /*!
   * @brief This function sets a value in member timestamp
   * @param _timestamp New value for member timestamp
   */
  eProsima_user_DllExport void timestamp(int32_t _timestamp);

  /*!
   * @brief This function returns the value of member timestamp
   * @return Value of member timestamp
   */
  eProsima_user_DllExport int32_t timestamp() const;

  /*!
   * @brief This function returns a reference to member timestamp
   * @return Reference to member timestamp
   */
  eProsima_user_DllExport int32_t& timestamp();

  /*!
   * @brief This function sets a value in member seq
   * @param _seq New value for member seq
   */
  eProsima_user_DllExport void seq(int32_t _seq);

  /*!
   * @brief This function returns the value of member seq
   * @return Value of member seq
   */
  eProsima_user_DllExport int32_t seq() const;

  /*!
   * @brief This function returns a reference to member seq
   * @return Reference to member seq
   */
  eProsima_user_DllExport int32_t& seq();

  /*!
   * @brief This function copies the value in member data
   * @param _data New value to be copied in member data
   */
  eProsima_user_DllExport void data(const std::string& _data);

  /*!
   * @brief This function moves the value in member data
   * @param _data New value to be moved in member data
   */
  eProsima_user_DllExport void data(std::string&& _data);

  /*!
   * @brief This function returns a constant reference to member data
   * @return Constant reference to member data
   */
  eProsima_user_DllExport const std::string& data() const;

  /*!
   * @brief This function returns a reference to member data
   * @return Reference to member data
   */
  eProsima_user_DllExport std::string& data();
  /*!
   * @brief This function copies the value in member datatype
   * @param _datatype New value to be copied in member datatype
   */
  eProsima_user_DllExport void datatype(const std::string& _datatype);

  /*!
   * @brief This function moves the value in member datatype
   * @param _datatype New value to be moved in member datatype
   */
  eProsima_user_DllExport void datatype(std::string&& _datatype);

  /*!
   * @brief This function returns a constant reference to member datatype
   * @return Constant reference to member datatype
   */
  eProsima_user_DllExport const std::string& datatype() const;

  /*!
   * @brief This function returns a reference to member datatype
   * @return Reference to member datatype
   */
  eProsima_user_DllExport std::string& datatype();

  /*!
   * @brief This function returns the maximum serialized size of an object
   * depending on the buffer alignment.
   * @param current_alignment Buffer alignment.
   * @return Maximum serialized size.
   */
  eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
      size_t current_alignment = 0);

  /*!
   * @brief This function returns the serialized size of a data depending on the
   * buffer alignment.
   * @param data Data which is calculated its serialized size.
   * @param current_alignment Buffer alignment.
   * @return Serialized size.
   */
  eProsima_user_DllExport static size_t getCdrSerializedSize(
      const CarrierMessage& data, size_t current_alignment = 0);

  /*!
   * @brief This function serializes an object using CDR serialization.
   * @param cdr CDR serialization object.
   */
  eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr& cdr) const;

  /*!
   * @brief This function deserializes an object using CDR serialization.
   * @param cdr CDR serialization object.
   */
  eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr& cdr);

  /*!
   * @brief This function returns the maximum serialized size of the Key of an
   * object depending on the buffer alignment.
   * @param current_alignment Buffer alignment.
   * @return Maximum serialized size.
   */
  eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
      size_t current_alignment = 0);

  /*!
   * @brief This function tells you if the Key has been defined for this type
   */
  eProsima_user_DllExport static bool isKeyDefined();

  /*!
   * @brief This function serializes the key members of an object using CDR
   * serialization.
   * @param cdr CDR serialization object.
   */
  eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr& cdr) const;

 private:
  int32_t m_timestamp;
  int32_t m_seq;
  std::string m_data;
  std::string m_datatype;
};

}  // namespace core
}  // namespace hermaeus

#endif  // _HERMAEUS_CORE_DOCK_CARRIER_MESSAGE_H_
